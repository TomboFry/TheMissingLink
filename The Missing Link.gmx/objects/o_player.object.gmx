<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player setup

// (H)ealth (P)oints (default: 100)
hp = 100;

// Facing Left / Right
facing = Facing.Left;

// Direction 0-360
dir = 0;

// Player Movement
moving = false;
move_dir_x = 0; // Amount of change in X dir
move_dir_y = 0; // Amount of change in Y dir

// Player's Aim
aim_x = x;
aim_y = y;

// Player's Speed (default: 2)
walk_speed = 2;

// Actual Current Speed
spd_x = 0;
spd_y = 0;

// Interactable Item
interactable = noone;
interactable_threshold = 20;

can_play = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Belongings (Camera, Inventory)

camera = instance_create(x, y, o_camera);
camera.target = self;

inventory = instance_create(x, y, o_inventory);
inventory.target = self;

inventory_draw = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (camera) instance_destroy();
with (inventory) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unset variables if they don't exist.

if (!instance_exists(interactable) || interactable == undefined) interactable = noone;
if (!instance_exists(inventory_draw) || inventory_draw == undefined) inventory_draw = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Play?

can_play = true;

if (inventory_draw != noone) can_play = false;

if (!o_main.can_play || !can_play) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Move

moving = 0;
move_dir_x = 0;
move_dir_y = 0;

var _up = f_key(Controls.Up);
var _down = f_key(Controls.Down);
var _left = f_key(Controls.Left);
var _right = f_key(Controls.Right);

move_dir_x = _right - _left;
move_dir_y = _down - _up;

spd_x = lerp(spd_x, move_dir_x * walk_speed * f_time_scale(), 0.3 * f_time_scale());
spd_y = lerp(spd_y, move_dir_y * walk_speed * f_time_scale(), 0.3 * f_time_scale());

if (!place_free(x + (move_dir_x * ceil(spd_x + 0.1)), y)) spd_x = 0;
if (!place_free(x, y + (move_dir_y * ceil(spd_y + 0.1)))) spd_y = 0;

dir = point_direction(x, y, x + spd_x, y + spd_y);

x += spd_x;
y += spd_y;

if (move_dir_x != 0 || move_dir_y != 0) moving = true;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Aim

if(o_main.gp_using){
    var a_h = f_key_axis(Controls.AxisHorz);
    var a_v = f_key_axis(Controls.AxisVert);
    if (abs(a_h + a_v) &gt; 0) {
        aim_x = x + (a_h * 48);
        aim_y = y + (a_v * 48);
    } else {
        aim_x = x + (move_dir_x * 48);
        aim_y = y + (move_dir_y * 48);
    }
} else {
    aim_x = mouse_x;
    aim_y = mouse_y;
}

if (aim_x &gt; x) {
    facing = Facing.Right
} else {
    facing = Facing.Left
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interactable Items

var nearest = instance_nearest(aim_x, aim_y, o_interactable);
var interactable_exists = instance_exists(interactable) &amp;&amp; interactable != undefined &amp;&amp; interactable != noone;

if (nearest != noone &amp;&amp; nearest != undefined) {
    var distance = point_distance(aim_x, aim_y, nearest.x, nearest.y);
    if (distance &lt; interactable_threshold &amp;&amp; nearest.interactable) {
        with (o_interactable) active = false;
        interactable = nearest;
        interactable.active = true;
        var str = 'Interact';
        if (nearest.object_index == o_inventory_item.object_index) str = 'Pick up';
        f_camera_text(camera, '[' + f_key_str(Controls.Action) + '] ' + str);
    } else {
        nearest.active = false;
    }
}

// Run a second time in case we have updated the interactable item
interactable_exists = instance_exists(interactable) &amp;&amp; interactable != undefined &amp;&amp; interactable != noone;

if (interactable_exists &amp;&amp; interactable.active == true &amp;&amp; f_key_down(Controls.Action)) {
    with (interactable) event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open Inventory

if (f_key_down(Controls.Inventory) &amp;&amp; inventory_draw == noone) {
    inventory_draw = instance_create(x, y, o_inventory_draw);
    inventory_draw.target = self;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_wall_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd_x = 0;
spd_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_colour(c_red);
draw_line_width(x, y, aim_x, aim_y, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
