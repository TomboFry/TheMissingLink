<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu setup

// Create Menu Items
if (!variable_instance_exists(self, 'items')) {
    items[0] = ds_map_create();
    ds_map_add(items[0], MenuItem.Text, 'Default Menu. Please change');
    ds_map_add(items[0], MenuItem.Type, MenuItemType.Action);
    ds_map_add(items[0], MenuItem.Enabled, true);
    items[1] = ds_map_create();
    ds_map_add(items[1], MenuItem.Text, 'A second choice for testing');
    ds_map_add(items[1], MenuItem.Type, MenuItemType.Action);
    ds_map_add(items[1], MenuItem.Enabled, false);
}

/// Set up positioning

// Menu text alignment
if (!variable_instance_exists(self, 'menu_align')) menu_align = MenuAlign.Center;

// Position the menu differently if required
if (!variable_instance_exists(self, 'offset_x')) offset_x = 0;
if (!variable_instance_exists(self, 'offset_y')) offset_y = 0;

// Maximum menu width 0-1 of screen percentage
if (!variable_instance_exists(self, 'menu_width')) menu_width = 0.75;

if (!variable_instance_exists(self, 'item_height')) item_height = 15;
if (!variable_instance_exists(self, 'item_padding')) item_padding = 3;

// Currently selected menu item
menu_view = 0;
selection = 0;
select_min = 0;
select_max = array_length_1d(items) - 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; array_length_1d(items); i++) {
    ds_map_destroy(items[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Selection

var _vert = f_key_down(Controls.Down) - f_key_down(Controls.Up);
var _horz = f_key_down(Controls.Right) - f_key_down(Controls.Left);
var _action = f_key_down(Controls.Confirm);

selection = clamp(selection + _vert, select_min, select_max);

var _item = items[selection];

if (_action == true &amp;&amp; _item[? MenuItem.Enabled] &amp;&amp; _item[? MenuItem.Type] == MenuItemType.Action) {
    event_user(selection);
}

if (_horz != 0 &amp;&amp; _item[? MenuItem.Type] == MenuItemType.Variable) {
    event_user(selection);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action for menu item 0

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Draw

// offset_x,_y
// menu_width
// menu_align
// menu_view
// item_height
// item_padding

// Just center align by default for now.
var view_x = view_xview[menu_view] + (view_wview[menu_view] / 2) + offset_x;
var view_y = view_yview[menu_view] + offset_y;

draw_set_halign(fa_center);
draw_set_valign(fa_top);

for (var i = select_min; i &lt;= select_max; i++) {
    draw_set_colour(c_white);

    var item = items[i];
    var text = item[? MenuItem.Text];
    var item_width = string_width(text);

    if (selection == i) {
        var rect_height = string_height(text);

        draw_set_colour(c_white);
        draw_rectangle(
            view_x - (item_width / 2) - item_padding,
            view_y + (i * item_height) + 4 - item_padding,
            view_x + (item_width / 2) + item_padding,
            view_y + (i * item_height) - 2 + rect_height + item_padding,
            false
        );
        draw_set_colour(c_black);
    }

    draw_text(view_x, view_y + (i * item_height), text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
