<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up inventory

// Target player. Can access camera and inventory from here.
target = noone;

init = false;

// Pixel size of each grid square
grid_size = 16;

// Selected inventory slot
selected_row = 0;
selected_col = 0;

// Positional variables
offset_x = 16;
offset_y = 24;
item_spacing = 4;

// Swap Items
is_swapping = false;
swap_col = -1;
swap_row = -1;

// Polish
// Selected inv item has flashing border
border_width = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

if (init == false &amp;&amp; target != noone) {
    init = true;
} else if (init == false || !o_main.can_play) {
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory Controls

var inv = target.inventory;

var _vert = f_key_down(Controls.Down) - f_key_down(Controls.Up);
var _horz = f_key_down(Controls.Right) - f_key_down(Controls.Left);
var _inv = f_key_down(Controls.Inventory);
var _swap = f_key_down(Controls.Confirm);
var _drop = f_key_down(Controls.Action);
var _cancel = f_key_down(Controls.Pause);

var selected_item = inv.inventory[# selected_col, selected_row];

var min_row = 0;

if (is_swapping) {
    f_pause_disable();

    var swap_item = inv.inventory[# swap_col, swap_row];
    min_row = swap_item.type != InventoryItemType.Weapon;
    
    // Cancel the swap
    if (_cancel) {
        selected_col = swap_col;
        selected_row = swap_row;

        is_swapping = false;
        swap_col = -1;
        swap_row = -1;
    }
    
    if (_swap &amp;&amp; !(swap_row == 0 &amp;&amp; selected_item != noone &amp;&amp; selected_item.type != InventoryItemType.Weapon)) {
        var temp_item = swap_item;
        
        inv.inventory[# swap_col, swap_row] = selected_item;
        inv.inventory[# selected_col, selected_row] = temp_item;

        is_swapping = false;
        swap_col = -1;
        swap_row = -1;
    }
} else {
    if (_inv) instance_destroy();
    
    if (_drop &amp;&amp; selected_item != noone) {
        selected_item.x = target.x;
        selected_item.y = target.y;

        selected_item.persistent = false;

        selected_item.in_inventory = false;
        selected_item.interactable = true;
        inv.inventory[# selected_col, selected_row] = noone;
    }

    // Start the swap if we're actually swapping an item
    if (_swap &amp;&amp; selected_item != noone) {
        swap_col = selected_col;
        swap_row = selected_row;
        is_swapping = true;
    }
}

selected_row = clamp(selected_row + _vert, min_row, inv.rows - 1);
selected_col = clamp(selected_col + _horz, 0, inv.cols - 1);

border_width = (sin(degtorad(get_timer() / 2000)) + 1.5) / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Inventory

if (!init) exit;

var view = target.camera.view;
var inv = target.inventory;

var draw_x = offset_x + view_xview[view];
var draw_y = offset_y + view_yview[view];

draw_set_alpha(0.5);
draw_set_colour(c_black);
draw_rectangle(view_xview[view], view_yview[view], view_xview[view] + view_wview[view], view_yview[view] + view_hview[view], false);

draw_set_alpha(1);
draw_set_colour(c_white);

for (var j = 0; j &lt; inv.rows; j++) {
    for (var i = 0; i &lt; inv.cols; i++) {
        var separator = (j &gt; 0) * 4;
        var left = draw_x + (grid_size * i) + (item_spacing * i);
        var right = draw_x + (grid_size * (i + 1)) + (item_spacing * i);
        var top = draw_y + (grid_size * j) + (item_spacing * j) + separator;
        var bottom = draw_y + (grid_size * (j + 1)) + (item_spacing * j) + separator;
        var selected = (selected_col == i &amp;&amp; selected_row == j) || (swap_col == i &amp;&amp; swap_row == j);
        var width = selected * border_width;

        if (is_swapping &amp;&amp; swap_col == i &amp;&amp; swap_row == j) {
            draw_set_colour(c_orange);
        } else {
            draw_set_colour(c_white);
        }
        
        draw_line_width(left - width, top - width, right + width, top - width, width + 1);
        draw_line_width(left - width, top - width, left - width, bottom + width, width + 1);
        draw_line_width(left - width, bottom + width, right + width, bottom + width, width + 1);
        draw_line_width(right + width, top - width, right + width, bottom + width, width + 1);

        var item = inv.inventory[# i, j];
        if (item != noone) {
            draw_sprite(item.sprite_index, item.image_index, left + item.sprite_xoffset + 2, top + item.sprite_yoffset + 2);
        }
    }
}

var desc_x = draw_x + ((grid_size + item_spacing) * inv.cols) + 4;

draw_set_colour(c_white);
draw_set_valign(fa_top);

// Draw remaining space
var space_str = string(f_inventory_size_used(inv)) + ' / ' + string(f_inventory_size_total(inv));
draw_set_halign(fa_right);
draw_text(desc_x - 4, draw_y - 12, space_str);
draw_set_halign(fa_left);

var selected_item = inv.inventory[# selected_col, selected_row];
if (selected_item != noone) {
    draw_set_font(fnt_large);
    draw_text(desc_x, draw_y, selected_item.name);
    draw_set_font(fnt_main);
    draw_text_ext(desc_x, draw_y + 12, selected_item.description, string_height('d'), 128);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
