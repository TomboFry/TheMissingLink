<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set up inventory

// Target player. Can access camera and inventory from here.
target = noone;

init = false;

// Pixel size of each grid square
grid_size = 16;

// Selected inventory slot
selected_row = 0;
selected_col = 0;

// Positional variables
offset_x = 16;
offset_y = 16;
item_spacing = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

if (init == false &amp;&amp; target != noone) {
    init = true;
} else if (init == false) {
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory Controls

var inv = target.inventory;

var _vert = f_key_down(Controls.Down) - f_key_down(Controls.Up);
var _horz = f_key_down(Controls.Right) - f_key_down(Controls.Left);
var _inv = f_key_down(Controls.Inventory);

if (_inv) {
    instance_destroy();
    exit;
}

selected_row = clamp(selected_row + _vert, 0, inv.rows - 1);
selected_col = clamp(selected_col + _horz, 0, inv.cols - 1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Inventory

if (!init) exit;

var view = target.camera.view;
var inv = target.inventory;

var draw_x = offset_x + view_xview[view];
var draw_y = offset_y + view_yview[view];

draw_set_alpha(0.5);
draw_set_colour(c_black);
draw_rectangle(draw_x, draw_y, draw_x + view_wview[view], draw_y + view_hview[view], false);

draw_set_alpha(1);
draw_set_colour(c_white);

for (var j = 0; j &lt; inv.cols; j++) {
    for (var i = 0; i &lt; inv.rows; i++) {
        var left = draw_x + (grid_size * j) + (item_spacing * j);
        var right = draw_x + (grid_size * (j + 1)) + (item_spacing * j);
        var top = draw_y + (grid_size * i) + (item_spacing * i);
        var bottom = draw_y + (grid_size * (i + 1)) + (item_spacing * i);
        var selected = selected_row == i &amp;&amp; selected_col == j;
        var width = selected;
        
        draw_set_colour(c_white);
        draw_line_width(left - width, top - width, right + width, top - width, width + 1);
        draw_line_width(left - width, top - width, left - width, bottom + width, width + 1);
        draw_line_width(left - width, bottom + width, right + width, bottom + width, width + 1);
        draw_line_width(right + width, top - width, right + width, bottom + width, width + 1);
        
        var item = inv.inventory[# i, j];
        if (item == noone) {
            draw_set_colour(c_red);
            draw_line_width(left, top, right, bottom, 1);
            draw_line_width(left, bottom, right, top, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
