<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera Setup

init = false;
view = 0;
cam_width = view_wview[view];
cam_height = view_hview[view];

// Target: What the camera should center on
target = noone;

// Point of Interest:

// How close you have to be before the PoI activates
poi_threshold = 100;
// If something should subtley grab your attention, set it here
poi = noone;
// What percentage of the camera should be dedicated to this PoI?
poi_interest = 0;

// Lerp the camera view to these variables
target_x = 0;
target_y = 0;

// Shake
shake = 0;

// Hint Text
bottom_text = '';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update bottom text

bottom_text = '';

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Camera

if (init == false &amp;&amp; target != noone) {
    view_enabled = true;
    view_visible[view] = true;
    cam_width = view_wview[view];
    cam_height = view_hview[view];

    init = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can Play?

if (!o_main.can_play || !target.can_play) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Determine Point of Interest

poi = noone;
poi_interest = 0;

var nearest = instance_nearest(target.x, target.y, o_poi);

if (nearest != noone &amp;&amp; nearest != undefined) {
    var distance = point_distance(target.x, target.y, nearest.x, nearest.y);
    if (distance &lt; poi_threshold) {
        poi = nearest;
        poi_interest = 1 - (distance / poi_threshold);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move camera towards target

// Factor in PoI
if (poi != noone) {
    x = 
        (((target.x + target.aim_x) / 2) * (1 - poi_interest)) + 
        (poi.x * poi_interest)
    y =
        (((target.y + target.aim_y) / 2) * (1 - poi_interest)) +
        (poi.y * poi_interest)
} else {
    x = (target.x + target.aim_x) / 2;
    y = (target.y + target.aim_y) / 2;
}

target_x = lerp(target_x, x - (view_wview[view] / 2), 0.1 * f_time_scale());
target_y = lerp(target_y, y - (view_hview[view] / 2), 0.1 * f_time_scale());

var real_shake = power(shake, 2);

view_xview[view] = target_x + random_range(-real_shake, real_shake);
view_yview[view] = target_y + random_range(-real_shake, real_shake);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
/*
draw_set_colour(c_white);
draw_text(view_xview[view], view_yview[view], init);
draw_text(view_xview[view], view_yview[view] + 10, string(view_xview[view]) + '; ' + string(view_yview[view]));

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bottom text

draw_set_font(fnt_main);
draw_set_colour(c_white);

draw_set_valign(fa_bottom);
draw_set_halign(fa_center);

var bottom = 4;

draw_text(
    view_xview[view] + (view_wview[view] / 2),
    view_yview[view] + view_hview[view] - string_height(bottom_text) - bottom,
    bottom_text
);

/*
draw_rectangle(
    view_xview[view] + (view_wview[view] / 2) - 8,
    view_yview[view] + view_hview[view] - string_height(bottom_text) - bottom - 8,
    view_xview[view] + (view_wview[view] / 2) + 8,
    view_yview[view] + view_hview[view] - string_height(bottom_text) + 6,
    false
);
*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inventory Slots

var row = 0;
var inv = target.inventory;
var inventory_slot_selected = target.inventory_slot_selected;

var grid_size = 12;
var item_spacing = 3;

var draw_x = view_xview[view] + 4;
var draw_y = view_yview[view] + view_hview[view] - 4 - grid_size;

for (var i = 0; i &lt; inv.cols; i++) {
    var left = draw_x + (grid_size * i) + (item_spacing * i);
    var right = draw_x + (grid_size * (i + 1)) + (item_spacing * i);
    var top = draw_y;
    var bottom = draw_y + grid_size;
    var selected = i == inventory_slot_selected;
    
    draw_set_colour(c_white);
    draw_line_width(left - selected, top - selected, right + selected, top - selected, selected + 1);
    draw_line_width(left - selected, top - selected, left - selected, bottom + selected, selected + 1);
    draw_line_width(left - selected, bottom + selected, right + selected, bottom + selected, selected + 1);
    draw_line_width(right + selected, top - selected, right + selected, bottom + selected, selected + 1);

    var item = inv.inventory[# i, 0];
    if (item != noone) {
        draw_sprite(
            item.sprite_index,
            item.image_index,
            left + item.sprite_xoffset + 2,
            top + item.sprite_yoffset + 2
        );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
