<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls Setup

keys[0] = ds_map_create();

ds_map_add(keys[0], vk_add, "Add");
ds_map_add(keys[0], vk_alt, "Alt");
ds_map_add(keys[0], vk_backspace, "Backspace");
ds_map_add(keys[0], vk_control, "Control");
ds_map_add(keys[0], vk_decimal, ".");
ds_map_add(keys[0], vk_delete, "Delete");
ds_map_add(keys[0], vk_divide, "/");
ds_map_add(keys[0], vk_down, "Down");
ds_map_add(keys[0], vk_end, "End");
ds_map_add(keys[0], vk_enter, "Enter");
ds_map_add(keys[0], vk_escape, "Escape");
ds_map_add(keys[0], vk_f1, "F1");
ds_map_add(keys[0], vk_f2, "F2");
ds_map_add(keys[0], vk_f3, "F3");
ds_map_add(keys[0], vk_f4, "F4");
ds_map_add(keys[0], vk_f5, "F5");
ds_map_add(keys[0], vk_f6, "F6");
ds_map_add(keys[0], vk_f7, "F7");
ds_map_add(keys[0], vk_f8, "F8");
ds_map_add(keys[0], vk_f9, "F9");
ds_map_add(keys[0], vk_f10, "F10");
ds_map_add(keys[0], vk_f11, "F11");
ds_map_add(keys[0], vk_f12, "F12");
ds_map_add(keys[0], vk_home, "Home");
ds_map_add(keys[0], vk_insert, "Insert");
ds_map_add(keys[0], vk_left, "Left");
ds_map_add(keys[0], vk_multiply, "*");
ds_map_add(keys[0], vk_numpad0, "Numpad 0");
ds_map_add(keys[0], vk_numpad1, "Numpad 1");
ds_map_add(keys[0], vk_numpad2, "Numpad 2");
ds_map_add(keys[0], vk_numpad3, "Numpad 3");
ds_map_add(keys[0], vk_numpad4, "Numpad 4");
ds_map_add(keys[0], vk_numpad5, "Numpad 5");
ds_map_add(keys[0], vk_numpad6, "Numpad 6");
ds_map_add(keys[0], vk_numpad7, "Numpad 7");
ds_map_add(keys[0], vk_numpad8, "Numpad 8");
ds_map_add(keys[0], vk_numpad9, "Numpad 9");
ds_map_add(keys[0], vk_pagedown, "Page Down");
ds_map_add(keys[0], vk_pageup, "Page Up");
ds_map_add(keys[0], vk_pause, "Pause");
ds_map_add(keys[0], vk_printscreen, "Print Screen");
ds_map_add(keys[0], vk_return, "Return");
ds_map_add(keys[0], vk_right, "Right");
ds_map_add(keys[0], vk_shift, "Shift");
ds_map_add(keys[0], vk_space, "Space");
ds_map_add(keys[0], vk_subtract, "Subtract");
ds_map_add(keys[0], vk_tab, "Tab");
ds_map_add(keys[0], vk_up, "Up");
ds_map_add(keys[0], ord('1'), "1");
ds_map_add(keys[0], ord('2'), "2");
ds_map_add(keys[0], ord('3'), "3");
ds_map_add(keys[0], ord('4'), "4");
ds_map_add(keys[0], ord('5'), "5");
ds_map_add(keys[0], ord('6'), "6");
ds_map_add(keys[0], ord('7'), "7");
ds_map_add(keys[0], ord('8'), "8");
ds_map_add(keys[0], ord('9'), "9");
ds_map_add(keys[0], ord('0'), "0");
ds_map_add(keys[0], ord('-'), "-");
ds_map_add(keys[0], ord('='), "=");
ds_map_add(keys[0], ord('!'), "!");
ds_map_add(keys[0], ord('"'), '"');
ds_map_add(keys[0], ord('$'), "$");
ds_map_add(keys[0], ord('%'), "%");
ds_map_add(keys[0], ord('^'), "^");
ds_map_add(keys[0], ord('&amp;'), "&amp;");
ds_map_add(keys[0], ord('£'), "£");
ds_map_add(keys[0], ord('*'), "*");
ds_map_add(keys[0], ord('('), "(");
ds_map_add(keys[0], ord(')'), ")");
ds_map_add(keys[0], ord('_'), "_");
ds_map_add(keys[0], ord('+'), "+");
ds_map_add(keys[0], ord('Q'), "Q");
ds_map_add(keys[0], ord('W'), "W");
ds_map_add(keys[0], ord('E'), "E");
ds_map_add(keys[0], ord('R'), "R");
ds_map_add(keys[0], ord('T'), "T");
ds_map_add(keys[0], ord('Y'), "Y");
ds_map_add(keys[0], ord('U'), "U");
ds_map_add(keys[0], ord('I'), "I");
ds_map_add(keys[0], ord('O'), "O");
ds_map_add(keys[0], ord('P'), "P");
ds_map_add(keys[0], ord('A'), "A");
ds_map_add(keys[0], ord('S'), "S");
ds_map_add(keys[0], ord('D'), "D");
ds_map_add(keys[0], ord('F'), "F");
ds_map_add(keys[0], ord('G'), "G");
ds_map_add(keys[0], ord('H'), "H");
ds_map_add(keys[0], ord('J'), "J");
ds_map_add(keys[0], ord('K'), "K");
ds_map_add(keys[0], ord('L'), "L");
ds_map_add(keys[0], ord('['), "[");
ds_map_add(keys[0], ord(']'), "]");
ds_map_add(keys[0], ord('{'), "{");
ds_map_add(keys[0], ord('}'), "}");
ds_map_add(keys[0], ord(';'), ";");
ds_map_add(keys[0], ord(':'), ":");
ds_map_add(keys[0], ord("'"), "'");
ds_map_add(keys[0], ord('@'), "@");
ds_map_add(keys[0], ord('#'), "#");
ds_map_add(keys[0], ord('~'), "~");
ds_map_add(keys[0], ord('|'), "|");
ds_map_add(keys[0], ord('\'), "\");
ds_map_add(keys[0], ord('Z'), "Z");
ds_map_add(keys[0], ord('X'), "X");
ds_map_add(keys[0], ord('C'), "C");
ds_map_add(keys[0], ord('V'), "V");
ds_map_add(keys[0], ord('B'), "B");
ds_map_add(keys[0], ord('N'), "N");
ds_map_add(keys[0], ord('M'), "M");
ds_map_add(keys[0], ord(','), ",");
ds_map_add(keys[0], ord('&lt;'), "&lt;");
ds_map_add(keys[0], ord('.'), ".");
ds_map_add(keys[0], ord('&gt;'), "&gt;");
ds_map_add(keys[0], ord('/'), "/");
ds_map_add(keys[0], ord('?'), "?");
ds_map_add(keys[0], ord('`'), "`");
ds_map_add(keys[0], ord('¬'), "¬");
ds_map_add(keys[0], ord('¦'), "¦");
ds_map_add(keys[0], mb_left, 'Left Click');
ds_map_add(keys[0], mb_right, 'Right Click');

keys[1] = ds_map_create();

ds_map_add(keys[1], gp_face1,      "A");
ds_map_add(keys[1], gp_face2,      "B");
ds_map_add(keys[1], gp_face3,      "X");
ds_map_add(keys[1], gp_face4,      "Y");
ds_map_add(keys[1], gp_shoulderl,  "LB");
ds_map_add(keys[1], gp_shoulderlb, "LT");
ds_map_add(keys[1], gp_shoulderr,  "RB");
ds_map_add(keys[1], gp_shoulderrb, "RT");
ds_map_add(keys[1], gp_padu,       "Up");
ds_map_add(keys[1], gp_padd,       "Down");
ds_map_add(keys[1], gp_padl,       "Left");
ds_map_add(keys[1], gp_padr,       "Right");
ds_map_add(keys[1], gp_stickl,     "L-Stick");
ds_map_add(keys[1], gp_stickr,     "R-Stick");
ds_map_add(keys[1], gp_select,     "Back");
ds_map_add(keys[1], gp_start,      "Start");

// Use Gamepads? (Boolean)
gp_using = false;

// Gamepad currently in use (Integer)
gp_in_use = 0;

// Vibrate Gamepads? (Boolean)
gp_vibrate = true;

enum Controls {
    Up,
    Down,
    Left,
    Right,
    Action,
    Confirm,
    WeaponFire,
    Pause,
    Fullscreen,
    Inventory,
    InventorySwap,
    AxisVert,
    AxisHorz
}

/*
 * Structure
 * 0 = Name
 * 1 = M/KB input (eg. vk_up)
 * 2 = GP input (eg. gp_face1 or gp_padu)
 */

ctrl[Controls.Up, 0] = "Up";
ctrl[Controls.Up, 1] = ord('W');
ctrl[Controls.Up, 2] = gp_padu;

ctrl[Controls.Down, 0] = "Down";
ctrl[Controls.Down, 1] = ord('S');
ctrl[Controls.Down, 2] = gp_padd;

ctrl[Controls.Left, 0] = "Left";
ctrl[Controls.Left, 1] = ord('A');
ctrl[Controls.Left, 2] = gp_padl;

ctrl[Controls.Right, 0] = "Right";
ctrl[Controls.Right, 1] = ord('D');
ctrl[Controls.Right, 2] = gp_padr;

ctrl[Controls.Action, 0] = "Action";
ctrl[Controls.Action, 1] = ord('E');
ctrl[Controls.Action, 2] = gp_face3;

ctrl[Controls.Confirm, 0] = "Confirm";
ctrl[Controls.Confirm, 1] = vk_space;
ctrl[Controls.Confirm, 2] = gp_face1;

ctrl[Controls.WeaponFire, 0] = "Fire Weapon";
ctrl[Controls.WeaponFire, 1] = mb_left;
ctrl[Controls.WeaponFire, 2] = gp_shoulderrb;

ctrl[Controls.Pause, 0] = "Pause / Back";
ctrl[Controls.Pause, 1] = vk_escape;
ctrl[Controls.Pause, 2] = gp_start;

ctrl[Controls.Fullscreen, 0] = "Fullscreen";
ctrl[Controls.Fullscreen, 1] = vk_f11;
ctrl[Controls.Fullscreen, 2] = gp_stickl;

ctrl[Controls.Inventory, 0] = "Inventory";
ctrl[Controls.Inventory, 1] = vk_tab;
ctrl[Controls.Inventory, 2] = gp_select;

ctrl[Controls.InventorySwap, 0] = "Switch";
ctrl[Controls.InventorySwap, 1] = ord('Q');
ctrl[Controls.InventorySwap, 2] = gp_shoulderl;

ctrl[Controls.AxisHorz, 0] = "Horizontal Axis";
ctrl[Controls.AxisHorz, 1] = undefined;
ctrl[Controls.AxisHorz, 2] = gp_axisrh;

ctrl[Controls.AxisVert, 0] = "Vertical Axis";
ctrl[Controls.AxisVert, 1] = undefined;
ctrl[Controls.AxisVert, 2] = gp_axisrv;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Audio Groups


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enum Values


// Player / Enemy Facing Directions
enum Facing {
     Left,
     Right
}

enum InventoryItemType {
    Weapon,
    Core,
    Misc
}

enum EnemyState {
    Idle,
    Walk,
    Attack,
    Dead
}


enum MenuItem {
    Text,
    Type,
    Enabled
}

// Menu Enums

// Determines whether a menu item uses Left/Right or Select Controls
enum MenuItemType {
    Action,
    Variable
}

enum MenuAlign {
    Left,
    Right,
    Center
}

enum DialogueType {
    Text,
    Question
}

enum DialogueItem {
    Type,
    Text,
    Character,
    Options
}

enum MenuTransition {
    Enter,
    Main,
    Exit
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Misc. Variables

// How fast everything should move:
// (allows for slow motion!)
time_scale = 1;

// Whether the majority of the game can continue running
// (useful for pause menu and dialogue screens)
can_play = true;

// If there are certain cases where pausing is the wrong
// thing to do, you can disable the use of the Pause
// button specifically for pausing here:
can_pause = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dialogue Queue

dialogue = ds_queue_create();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screen setup

screen_height = 192;
aspect_ratio = clamp(display_get_width() / display_get_height(), 1.25, 2.4);
screen_width = round((screen_height * aspect_ratio) / 64) * 64;
scale = 2;
scale_mod = 0;

application_surface_draw_enable(false);
surface_resize(application_surface, screen_width, screen_height);
display_set_gui_size(screen_width, screen_height);
alarm[0] = 5;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Audio Settings

music = 1;
sfx = 1;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// When completed, go to main menu

room_goto(r_menu_main);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_size(screen_width * 2, screen_height * 2);
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause Menu

if (f_key_down(Controls.Pause) &amp;&amp; can_play &amp;&amp; can_pause) {
    instance_create(x, y, o_menu_pause);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset certain variables

can_pause = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset certain variables

can_play = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

if (keyboard_check_pressed(ord('R'))) game_restart();

if (keyboard_check_pressed(ord('T'))) can_play = !can_play;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set fullscreen

if (f_key_down(Controls.Fullscreen)) f_fullscreen(!window_get_fullscreen());

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Management

if (instance_exists(o_menu_parent) || instance_exists(o_dialogue)) {
    can_play = false;
    can_pause = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dialogue Management

if (!ds_queue_empty(dialogue) &amp;&amp; instance_number(o_dialogue) == 0 &amp;&amp; can_play) {
    var dialogue_item = ds_queue_dequeue(dialogue);
    var popup = instance_create(0, 0, o_dialogue);

    popup.type = dialogue_item[? DialogueItem.Type];
    popup.text = dialogue_item[? DialogueItem.Text];
    popup.character = dialogue_item[? DialogueItem.Character];
    popup.options = dialogue_item[? DialogueItem.Options];
    with (popup) event_user(0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_enabled = true;
view_visible[0] = true;

// 2 = max players
for (var i = 0; i &lt; 2; i++) {
    view_wview[i] = screen_width;
    view_hview[i] = screen_height;
    view_wport[i] = screen_width * 2;
    view_hport[i] = screen_height * 2;
}

scale_mod = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx = (window_get_width() * 0.5) - (surface_get_width(application_surface) * (scale + scale_mod) * 0.5);
var yy = (window_get_height() * 0.5) - (surface_get_height(application_surface) * (scale + scale_mod) * 0.5);

draw_surface_ext(application_surface, xx, yy, scale + scale_mod, scale + scale_mod, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
