<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Dialogue Box

step = -1;

text_count = 0;
text_length = 0;

box_padding = 8;

// These should be overwritten upon creation

type = DialogueType.Text;
text = 'Please change';
character = -1;
options = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard Control

var _confirm = f_key_down(Controls.Confirm) || f_key_down(Controls.Down);

switch (step) {
    case (MenuTransition.Enter):
        // Enter transition
        if (_confirm) text_count = text_length;
        if (text_count &lt; text_length) {
            text_count++;
        } else {
            step = MenuTransition.Main;
            if (options != undefined) {
                var menu = instance_create(0, 0, options);
                menu.item_height = 14;
                menu.offset_y = view_hview[0] - (menu.item_height * 2);
            }
        }
        break;
    case (MenuTransition.Main):
        // Wait for player to press confirm
        if (options != undefined) {
            if (instance_exists(o_menu_parent)) {
                break;
            } else {
                step = MenuTransition.Exit;
            }
        }
        if (_confirm) step = MenuTransition.Exit;
        break;
    case (MenuTransition.Exit):
        // Close dialogue
        
        // Destroy straight away for now.
        instance_destroy();
        break;
    default: exit; break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Perform Dialogue Box Things

text_length = string_length(text);
text_count = 0;
step = MenuTransition.Enter;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Box

if (step == -1) exit;

var view = 0;

draw_set_alpha(1);
draw_set_colour(c_dkgray);

draw_set_font(fnt_main);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

var line_height = string_height(' ') + 1;
var text_width = view_wview[view] - (box_padding * 2);
var box_width = view_wview[view];
if (character == -1) {
    box_width = string_width_ext(text, line_height, view_wview[view] - (box_padding * 2)) + (box_padding * 2);
    if (view_wview[view] - box_width &lt;= 16) box_width = view_wview[view];
}

// Set these values as if they have a character associated to them
var left = view_xview[view] + (view_wview[view] / 2) - (box_width / 2);
var right = view_xview[view] + (view_wview[view] / 2) + (box_width / 2);
var top = view_yview[view] + view_hview[view] - string_height_ext(text, line_height, text_width) - (box_padding * 2);
var bottom = view_yview[view] + view_hview[view];


draw_rectangle(left, top, right, bottom, false);

draw_set_colour(c_white);
draw_text_ext(left + box_padding, top + box_padding, string_copy(text, 0, text_count), line_height, text_width);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
